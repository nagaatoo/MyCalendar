/*
 * MyCalendar API
 * API для календаря
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package org.openapitools.client.api;

import org.openapitools.client.ApiCallback;
import org.openapitools.client.ApiClient;
import org.openapitools.client.ApiException;
import org.openapitools.client.ApiResponse;
import org.openapitools.client.Configuration;
import org.openapitools.client.Pair;
import org.openapitools.client.ProgressRequestBody;
import org.openapitools.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import org.openapitools.client.model.Calendar;
import org.openapitools.client.model.CalendarList;
import org.openapitools.client.model.Error;
import org.openapitools.client.model.ScheduleCreate;
import org.openapitools.client.model.User;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient localVarApiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    /**
     * Build call for calendarGet
     * @param pageNo Страница (optional)
     * @param pageSize Размер страницы (optional)
     * @param filter Быстрый фильтр (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список календарей </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarGetCall(Integer pageNo, Integer pageSize, String filter, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (pageNo != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageNo", pageNo));
        }

        if (pageSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("pageSize", pageSize));
        }

        if (filter != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filter", filter));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarGetValidateBeforeCall(Integer pageNo, Integer pageSize, String filter, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = calendarGetCall(pageNo, pageSize, filter, _callback);
        return localVarCall;

    }

    /**
     * 
     * Получить все календари пользователя
     * @param pageNo Страница (optional)
     * @param pageSize Размер страницы (optional)
     * @param filter Быстрый фильтр (optional)
     * @return CalendarList
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список календарей </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public CalendarList calendarGet(Integer pageNo, Integer pageSize, String filter) throws ApiException {
        ApiResponse<CalendarList> localVarResp = calendarGetWithHttpInfo(pageNo, pageSize, filter);
        return localVarResp.getData();
    }

    /**
     * 
     * Получить все календари пользователя
     * @param pageNo Страница (optional)
     * @param pageSize Размер страницы (optional)
     * @param filter Быстрый фильтр (optional)
     * @return ApiResponse&lt;CalendarList&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список календарей </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<CalendarList> calendarGetWithHttpInfo(Integer pageNo, Integer pageSize, String filter) throws ApiException {
        okhttp3.Call localVarCall = calendarGetValidateBeforeCall(pageNo, pageSize, filter, null);
        Type localVarReturnType = new TypeToken<CalendarList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Получить все календари пользователя
     * @param pageNo Страница (optional)
     * @param pageSize Размер страницы (optional)
     * @param filter Быстрый фильтр (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Список календарей </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarGetAsync(Integer pageNo, Integer pageSize, String filter, final ApiCallback<CalendarList> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarGetValidateBeforeCall(pageNo, pageSize, filter, _callback);
        Type localVarReturnType = new TypeToken<CalendarList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for calendarIdGet
     * @param id Идентификатор календаря (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Календарь </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarIdGetCall(Long id, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/calendar/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call calendarIdGetValidateBeforeCall(Long id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling calendarIdGet(Async)");
        }
        

        okhttp3.Call localVarCall = calendarIdGetCall(id, _callback);
        return localVarCall;

    }

    /**
     * 
     * 
     * @param id Идентификатор календаря (required)
     * @return Calendar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Календарь </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public Calendar calendarIdGet(Long id) throws ApiException {
        ApiResponse<Calendar> localVarResp = calendarIdGetWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * 
     * 
     * @param id Идентификатор календаря (required)
     * @return ApiResponse&lt;Calendar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Календарь </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Calendar> calendarIdGetWithHttpInfo(Long id) throws ApiException {
        okhttp3.Call localVarCall = calendarIdGetValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 
     * @param id Идентификатор календаря (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Календарь </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call calendarIdGetAsync(Long id, final ApiCallback<Calendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = calendarIdGetValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for schedulePost
     * @param scheduleCreate  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePostCall(ScheduleCreate scheduleCreate, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = scheduleCreate;

        // create path and map variables
        String localVarPath = "/schedule";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call schedulePostValidateBeforeCall(ScheduleCreate scheduleCreate, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = schedulePostCall(scheduleCreate, _callback);
        return localVarCall;

    }

    /**
     * 
     * Создать календарь
     * @param scheduleCreate  (optional)
     * @return Calendar
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public Calendar schedulePost(ScheduleCreate scheduleCreate) throws ApiException {
        ApiResponse<Calendar> localVarResp = schedulePostWithHttpInfo(scheduleCreate);
        return localVarResp.getData();
    }

    /**
     * 
     * Создать календарь
     * @param scheduleCreate  (optional)
     * @return ApiResponse&lt;Calendar&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<Calendar> schedulePostWithHttpInfo(ScheduleCreate scheduleCreate) throws ApiException {
        okhttp3.Call localVarCall = schedulePostValidateBeforeCall(scheduleCreate, null);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Создать календарь
     * @param scheduleCreate  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call schedulePostAsync(ScheduleCreate scheduleCreate, final ApiCallback<Calendar> _callback) throws ApiException {

        okhttp3.Call localVarCall = schedulePostValidateBeforeCall(scheduleCreate, _callback);
        Type localVarReturnType = new TypeToken<Calendar>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for userPost
     * @param user  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPostCall(User user, final ApiCallback _callback) throws ApiException {
        Object localVarPostBody = user;

        // create path and map variables
        String localVarPath = "/user";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        String[] localVarAuthNames = new String[] {  };
        return localVarApiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call userPostValidateBeforeCall(User user, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = userPostCall(user, _callback);
        return localVarCall;

    }

    /**
     * 
     * Создать пользователя
     * @param user  (optional)
     * @return User
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public User userPost(User user) throws ApiException {
        ApiResponse<User> localVarResp = userPostWithHttpInfo(user);
        return localVarResp.getData();
    }

    /**
     * 
     * Создать пользователя
     * @param user  (optional)
     * @return ApiResponse&lt;User&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<User> userPostWithHttpInfo(User user) throws ApiException {
        okhttp3.Call localVarCall = userPostValidateBeforeCall(user, null);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * Создать пользователя
     * @param user  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Создано </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Ошибка запроса </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call userPostAsync(User user, final ApiCallback<User> _callback) throws ApiException {

        okhttp3.Call localVarCall = userPostValidateBeforeCall(user, _callback);
        Type localVarReturnType = new TypeToken<User>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
